import aiogram.utils.exceptions
from data.classesRpg import *
from menu.inlineBut import *
from menu.keyboardBut import *
from data.workDB import connectToDB
from data.values import *

floor = '‚óΩÔ∏è'
wall = '‚¨õÔ∏è'
characterEnemy = {3: "üî¥", 4: "üü†", 5: "üü°"}
characterPlayer = "üü¢"

class Useful:
    def __init__(self, dataMessage):
        self.dataMessage = dataMessage
        self.id = dataMessage.chat.id

    async def SendText(self, text, keyboard=None, val=None, func="answer") -> None:
        """
           –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
           text - —Ç–µ–∫—Å—Ç
           keyboard - –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
           val - –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
           func - —Ç–∏–ø –æ—Ç–ø—Ä–∞–≤–∫–∏ (answer, edit)
        """
        send = self.dataMessage.answer
        if func == "edit":
            #print('24:', text)
            send = self.dataMessage.edit_text
        if keyboard is None:
            await send(text)
        else:
            try:
                await send(text, reply_markup=keyboard)
                #print(111, text)
            except aiogram.utils.exceptions.BadRequest as er:
                try:
                    await send(text, reply_markup=keyboard())
                    #print(222, text)
                except TypeError:
                    #print(333)
                    await send(text, reply_markup=keyboard(val))

    async def GenerateMonsters(self, Map) -> None:
        battleMonsters[self.id] = {
            3: {},
            4: {},
            5: {},
        }
        for y in range(1, len(Map) - 1):
            for x in range(1, len(Map) - 1):
                monster = Map[y][x]
                if monster == 3:
                    battleMonsters[self.id][monster][f"{x} {y}"] = Monster(hp=2, attack=2, rangeAttack=1, coolDown=1,
                                                                     reward=30)
                elif monster == 4:
                    battleMonsters[self.id][monster][f"{x} {y}"] = Monster(hp=5, attack=1, rangeAttack=2, coolDown=1,
                                                                     reward=20)
                elif monster == 5:
                    battleMonsters[self.id][monster][f"{x} {y}"] = Monster(hp=1, attack=3, rangeAttack=1, coolDown=1,
                                                                     reward=40)

    async def GenerateMap(self, battleMap, hero: Hero):
        returnMap = ""
        for y in range(len(battleMap)):
            for x in range(len(battleMap[y])):
                if battleMap[y][x] == 0:
                    returnMap += floor
                elif battleMap[y][x] == 1:
                    returnMap += wall
                elif battleMap[y][x] == 2:
                    returnMap += characterPlayer
                    hero.y, hero.x = y, x
                elif battleMap[y][x] in (3, 4, 5):
                    returnMap += characterEnemy[battleMap[y][x]]
            returnMap += "\n"
        return returnMap

class Start:
    def __init__(self, dataMessage):
        self.dataMessage = dataMessage
        self.id = dataMessage.chat.id

    async def StartPlay(self):
        choiseHero[self.id] = None
        prove = connectToDB("SELECT Id FROM PlayersCharacters")
        print("Connect is successful")
        if (self.id,) in prove:
            print("Prove")
            await Useful(self.dataMessage).SendText("–° –≤–æ–∑—Ä–∞—â–µ–Ω–∏–µ–º", PLayerBase)
        else:
            await Useful(self.dataMessage).SendText(f"–ü—Ä–∏–≤–µ—Ç {self.dataMessage.chat.first_name}", Menu_start)

    async def ChooseHeroStart(self, call):
        if call.data.split("_")[1] == "Choice":
            if choiseHero[self.id] is None:
                await Useful(dataMessage=self.dataMessage).SendText("–í—ã –Ω–∏–∫–æ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª–∏", keyboard=character_choice,
                                                                val=chararactersForChoise, func="edit")
            else:
                print(choiseHero)
                for ch in chararactersForChoise:
                    if choiseHero[self.id] in ch:
                        connectToDB(
                            f"Insert Into PLayersCharacters (Id, Name, Attack, Health, Mana, Agility, Initiative, Callback, AttackRange) Values ({self.id}, ?, ?, ?, ?, ?, ?, ?, ?)",
                            (ch))
                        connectToDB(f"Insert Into RatingPlayers (Id, Rating, Money) Values ({self.id}, {0}, '{0}')")
                        connectToDB(f"UPDATE RatingPlayers SET CountHero = 1 WHERE Id = {self.id}")
                await Useful(dataMessage=self.dataMessage).SendText(
                    f"–£ –≤–∞—Å –ø–æ—è–≤–∏–ª—è –ø–µ—Ä–≤—ã–π –≥–µ—Ä–æ–π - <u>{choiseHero[self.id]}</u>"
                    , func="edit")
                await Useful(dataMessage=self.dataMessage).SendText(
                    "–£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã", keyboard=PLayerBase
                )
        else:
            for character in chararactersForChoise:
                if call.data in character:
                    choiseHero[self.id] = character[0]
                    await Useful(dataMessage=self.dataMessage).SendText(
                        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {character[0]}\n–ê—Ç–∞–∫–∞: {character[1]}\n–ó–¥–æ—Ä–æ–≤—å–µ: {character[2]}"
                        f"\n–ú–∞–Ω–∞: {character[3]}\n–õ–æ–≤–∫–æ—Å—Ç—å: {character[4]}\n–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞: {character[5]}",
                        keyboard=character_choice, val=chararactersForChoise, func="edit")

class Statistic:
    def __init__(self, dataMessage):
        self.dataMessage = dataMessage
        self.id = dataMessage.chat.id

    async def playerStatic(self):
        statsFromDb = connectToDB(f"SELECT * FROM RatingPlayers WHERE Id = {self.id}")[0]
        playerStats = f"–†–µ–π—Ç–∏–Ω–≥: {statsFromDb[1]}\n–î–µ–Ω—å–≥–∏: {statsFromDb[2]}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ—Ä–æ–µ–≤: {statsFromDb[3]}"
        await Useful(dataMessage=self.dataMessage).SendText(text=playerStats, keyboard=PLayerBase)

    async def heroStatic(self):
        stats = ""
        characters_of_player = connectToDB(f"Select * From PLayersCharacters Where Id = {self.id}")
        for ch in characters_of_player:
            stats += f"{ch[1]}:\n–ê—Ç–∞–∫–∞ - {ch[2]}\n–ó–¥–æ—Ä–æ–≤—å–µ - {ch[3]}\n–ú–∞–Ω–∞ - {ch[4]}\n–õ–æ–≤–∫–æ—Å—Ç—å - {ch[5]}\n" \
                     f"–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞ - {ch[6]}\n–ë—Ä–æ–Ω—è - {ch[11]}"
        await Useful(dataMessage=self.dataMessage).SendText(stats, keyboard=PLayerBase)

    async def menu(self):
        await Useful(dataMessage=self.dataMessage).SendText(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞",
                                                            keyboard=Stats)

